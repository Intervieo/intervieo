!pip install fpdf
!pip install requests fpdf
import os
import requests
from fpdf import FPDF

class GeminiAPIClient:
    def __init__(self, api_key=None):
        """
        Initialize the Gemini API client with an optional API key.
        Prioritizes environment variable if set.
        """
        self.api_key = api_key or os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("No API key provided. Set GEMINI_API_KEY environment variable.")

        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"

    def get_questions_answers(self, language, num_questions=50):
        """
        Fetch coding questions and answers from Gemini API.

        Args:
            language (str): Programming language to generate questions for
            num_questions (int): Number of questions to generate (minimum 50)

        Returns:
            list: List of dictionaries containing questions and answers
        """
        try:
            payload = {
                "contents": [{
                    "parts": [{
                        "text": f"Generate {num_questions} detailed coding interview questions and comprehensive answers for {language}. "
                               "Format the output as:\nQ1: Question text\nA1: Detailed answer text\nQ2: ...\n"
                               "Ensure the answers are well-explained."
                    }]
                }]
            }

            headers = {
                'Content-Type': 'application/json'
            }

            response = requests.post(
                f"{self.base_url}?key={self.api_key}",
                json=payload,
                headers=headers
            )

            response.raise_for_status()  # Raise an exception for bad responses

            # Print raw response for debugging
            print("Raw API Response:", response.json())  # Add this line to print the full API response

            # Parse the response (adjust based on actual Gemini API response structure)
            result = response.json()
            generated_text = result.get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', '')

            return self._parse_qa_pairs(generated_text)

        except requests.RequestException as e:
            print(f"API Request Error: {e}")
            return []
        except (KeyError, IndexError) as e:
            print(f"Response Parsing Error: {e}")
            return []

    def _parse_qa_pairs(self, text):
        """
        Parse the generated text into question-answer pairs.

        Args:
            text (str): Raw generated text from API

        Returns:
            list: Parsed Q&A pairs
        """
        pairs = []
        lines = text.split('\n')
        current_qa = {}

        for line in lines:
            if line.startswith('Q'):
                if current_qa:  # Save previous Q&A if exists
                    pairs.append(current_qa)
                current_qa = {'question': line[3:].strip()}
            elif line.startswith('A') and current_qa:
                current_qa['answer'] = line[3:].strip()

        if current_qa:  # Add last Q&A
            pairs.append(current_qa)

        return pairs

class PDFQuestionGenerator:
    @staticmethod
    def generate_pdf(language, questions_answers, filename=None):
        """
        Generate a PDF with questions and answers.

        Args:
            language (str): Programming language
            questions_answers (list): List of question-answer dictionaries
            filename (str, optional): Custom filename. Defaults to language-based name.
        """
        pdf = FPDF()
        pdf.add_page()

        # Title
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, f'{language} Coding Interview Questions', ln=True, align='C')
        pdf.ln(10)

        # Questions and Answers
        pdf.set_font('Arial', '', 12)
        for i, qa in enumerate(questions_answers, 1):
            # Question
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, f'Q{i}: {qa["question"]}', ln=True)

            # Answer
            pdf.set_font('Arial', '', 12)
            pdf.multi_cell(0, 10, qa['answer'])
            pdf.ln(5)

        # Default or custom filename
        output_filename = filename or f'{language.lower()}_coding_questions.pdf'
        pdf.output(output_filename)
        print(f"PDF generated: {output_filename}")

def main():
    try:
        # Get language input
        language = input("Enter programming language: ").strip()

        # Initialize Gemini API client with your provided API key
        gemini_client = GeminiAPIClient(api_key="AIzaSyDzHiIu-4Igxp7QkHaEYnk9aKGUCGgdyW4")  # Replace with your actual API key

        # Fetch Q&A (50 questions minimum)
        questions_answers = gemini_client.get_questions_answers(language, num_questions=50)

        if not questions_answers:
            print("No questions generated. Check API connection or try again.")
            return

        # Display questions up to 50
        for i, qa in enumerate(questions_answers, 1):
            if i > 50:  # Limit to 50 questions
                break
            print(f"Q{i}: {qa['question']}")
            print(f"A{i}: {qa['answer']}")
            print("-" * 50)

        # PDF generation prompt
        generate_pdf = input("Generate PDF? (yes/no): ").lower().strip() == 'yes'
        if generate_pdf:
            PDFQuestionGenerator.generate_pdf(language, questions_answers)

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
